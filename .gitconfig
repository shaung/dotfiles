[core]
    editor = vim
    pager = less -R

[color]
    ui = true
    diff = always
    status = auto
    branch = auto

[pager]
    diff = true

[user]
    name = shaung
    email = shaun.geng@gmail.com

[alias]
    co = checkout
    ci = commit
    st = status
    br = branch
    last = log -1 HEAD
    forget = rm --cached --
    stash-unapply = !git stash show -p | git apply -R
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ll = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --"
    ls = ls-files

    diffc = diff --color-words
    diffw = diff --word-diff
    # diff two seperate files
    difff = diff --no-index

    diverges = !bash -c 'diff -u <(git rev-list --first-parent "${1}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \"s/^ //p\" | head -1' -
    abandon = !"f(){ git filter-branch -f --tree-filter 'rm -f $0' HEAD;}; f"
    done = !git co master && git merge develop && git co develop
    undo = reset --soft "HEAD^"

    # apply the current changes to branch $1 using $2 as commit message, then merge back to the current branch
    pon = !"if [ -z $1 ] || [ -z $2 ]; then exit; fi; CURRBR=`git symbolic-ref --short HEAD`; f(){ echo $1; echo $2; git co $1; git commit -a -m $2; git co $CURRBR; git merge $1;}; f"

    # list branches merged to master
    merged = !"git branch --merged master | grep -v \\*"
    # delete local branched merged to master
    clear = !"git merged | xargs -n 1 git branch -d"

    # fetch and merge with master
    up = !"git fetch origin -v; git merge origin/master"

    lldos = !"find . -type f -print0 | xargs -0 file | grep CRLF"

    # respect typos
    psuh = push
    stat = status
    g = grep --break --heading --line-number
    ga = !git grep

[grep]
	lineNumber = true
